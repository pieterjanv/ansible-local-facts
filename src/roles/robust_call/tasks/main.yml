- name: push to stack / set tasks_from
  ansible.builtin.set_fact:
    scoped_role_host_vars_stack: "{{
      (
        (scoped_role_host_vars_stack[:-1] + [local]) if (
          scoped_role_host_vars_stack is defined and
          scoped_role_host_vars_stack | length > 0
        ) else []
      ) +
      [input | default({}) | combine({
        'caller': (
          ansible_parent_role_names[0] if ansible_parent_role_names is defined
          else None
        ),
        'callee': role | default(
          ansible_parent_role_names[0] if ansible_parent_role_names is defined
          else None
        ),
      })]
    }}"
    include_scoped_role_args: "{{ { 'tasks_from': 'tasks' } | combine(local, recursive=True) }}"

- name: update local
  ansible.builtin.set_fact:
    local: "{{ scoped_role_host_vars_stack[-1] }}"

- ansible.builtin.include_role:
    name: "{{ local.callee }}"
    allow_duplicates: "{{ include_scoped_role_args.allow_duplicates | default(true) }}"
    defaults_from: "{{ include_scoped_role_args.defaults_from | default('main') }}"
    handlers_from: "{{ include_scoped_role_args.handlers_from | default('main') }}"
    public: "{{ include_scoped_role_args.public | default(false) }}"
    rolespec_validate: "{{ include_scoped_role_args.rolespec_validate | default(true) }}"
    tasks_from: "{{ include_scoped_role_args.tasks_from | default('main') }}"
    vars_from: "{{ include_scoped_role_args.vars_from | default('main') }}"

- name: pop from stack
  ansible.builtin.set_fact:
    scoped_role_host_vars_stack: "{{ scoped_role_host_vars_stack[:-1] }}"

- name: update local
  ansible.builtin.set_fact:
    local: "{{
      scoped_role_host_vars_stack[-1] if (
        scoped_role_host_vars_stack is defined and
        scoped_role_host_vars_stack | length > 0
      ) else None
    }}"
