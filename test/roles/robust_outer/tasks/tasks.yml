- name: set some local facts
  pieterjanv.localscope.set:
    updates:
      my_intermediate_result: outer
      some:
        nested:
          key: value

- name: include a nested role
  ansible.builtin.include_role:
    name: roles/robust_nested

- name: assert `local.my_intermediate_result` is still available
  ansible.builtin.assert:
    that:
      - local.my_intermediate_result == "outer"
  ignore_errors: yes

- name: set some local facts recursively
  pieterjanv.localscope.set:
    updates:
      some:
        nested:
          other_key: other_value
    recursive: yes

- name: assert `local.some.nested` has been recursively updated
  ansible.builtin.assert:
    that:
      - local.some.nested.key == 'value' and local.some.nested.other_key == 'other_value'
  ignore_errors: yes

- name: set some templated local facts
  pieterjanv.localscope.set:
    updates:
      "{{ local.my_intermediate_result }}_key": "{{ local.some.nested.key }}"

- name: assert `local.outer_key` has been set to `'value'`
  ansible.builtin.assert:
    that:
      - local.outer_key == 'value'
  ignore_errors: yes

- name: include third party role
  ansible.builtin.include_role:
    name: pieterjanv.localscope.call
  vars:
    name: some_role

- name: assert local scope is still available
  ansible.builtin.assert:
    that:
      - local.my_intermediate_result == "outer"
  ignore_errors: yes
